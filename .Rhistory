pies$percent_NOP <- pies$n / sum(pies$n) * 100
pies$print <- as.character(pies$print)
pies1 <- pies %>% head(20)
# Create the pie chart
ggplot(pies1, aes(x = "", y = percent_NOP, fill = print)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
#scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "Study Rooms Requests by Group Size"
) +
theme_void()
#ggsave(one, file = "pie12.png")
#Still really difficult to see graphically so will make a table
ggplot(prints, aes(x = print)) +
geom_bar()
table_prints <- table(prints$print)
table_counts_df <- as.data.frame(table_prints)
# Rename the columns in the data frame
colnames(table_counts_df) <- c("Print", "Count")
table_counts_df <- arrange(table_counts_df, desc(Count))
print(table_counts_df)
#write_xlsx(table_counts_df, "print distribution_after.xlsx")
#might be useful later when coloring each bar chart according to it's actual color
colors_list <- unique(prints$color)
#might want to explore making color a factor variable if I want a specific order for my bar chart
#prints$color <- factor(prints$color, ordered = FALSE)
# If we want to order the colors on the bar chart by count
# prints$color <- factor(prints$color, levels = names(sort(table(prints$color), decreasing = TRUE)))
ggplot(prints, aes(x= color, fill = color)) +
geom_bar(show.legend = FALSE, color = "black") +
labs(title = "Color Distribution for 3D Prints",
y = "Number of Prints",
x = NULL,
subtitle = "After Online Form (after 6/5/23)") +
scale_y_continuous(
breaks = seq(0, 14, by = 2),
#minor_breaks = seq(0, 22, by = 1),
limits = c(0, 14)) +
#Archive print list color values
#scale_fill_manual(values = c("black", "blue", "darkgrey", "green", "lightgrey", "pink", "hotpink3", "mediumpurple4", "red", "ivory1", "indianred1", "yellow")) +
#Current print list color values
#scale_fill_manual(values = c("black", 'blue', 'green', 'darkgrey', 'orange', 'lightpink', 'red', 'floralwhite', 'yellow')) +
scale_fill_manual(values = c( 'blue', 'green',  'orange')) +
theme_clean() +
theme(plot.subtitle = element_text(size = 10),
axis.text.x = element_text(angle = 30, hjust = 1))
#In case we need to rotate the x axis labels or put in a minor line
#theme(axis.text.x = element_text(angle = 45, hjust = 1),
#panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"))
#ggsave(one, file = "print distribution_after.png")
#I filter out ID number 210 here because that was an outlier for contacting the person
prints <- prints %>% mutate(turnaround = as.Date(contacted_date) - as.Date(completion_time)) %>% filter(ID != 210)
#looking at turnaround time as a difftime variable
class(prints$turnaround)
summary(prints$turnaround, na.rm = TRUE)
mean(prints$turnaround, na.rm = TRUE)
#Changing turnaround variable to a numeric variable for a more standard analysis
prints$turnaround <- as.numeric(prints$turnaround)
summary(prints$turnaround, na.rm = TRUE)
mean_turnaround <- mean(prints$turnaround, na.rm = TRUE)
print(paste0("On average, it took us ", round(mean_turnaround, 2), " days to complete a patrons print once they requested it"))
emails_fails <- sum(prints$invalid_email == "X", na.rm = TRUE)
emails_fails <- round(emails_fails / length(prints$failed), digits = 2)
print(paste0(emails_fails * 100, "%", " patrons inputted email addresses were flagged failed by the program"))
fails <- sum(prints$failed == "X", na.rm = TRUE)
fail_percent <- round(fails / length(prints$failed), digits = 2)
print(paste0(fail_percent * 100, "%", " of our total print requests failed"))
prints_completed <- filter(prints, print_completed == "X")
picked_up <- sum(prints_completed$picked_up == "X", na.rm = TRUE)
picked_up <- round(picked_up / length(prints$picked_up), digits = 3)
print(paste0("Of the completed print rquests, ", picked_up * 100, "%", " of patrons have picked up their 3D prints"))
#Saving graphs
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis")
#Wrangling the data to be in pie chart format
pies <- prints %>% count(print)
pies$percent_NOP <- pies$n / sum(pies$n) * 100
pies$print <- as.character(pies$print)
pies1 <- pies %>% head(20)
# Create the pie chart
ggplot(pies1, aes(x = "", y = percent_NOP, fill = print)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
#scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "3D print distribution"
) +
theme_void()
#ggsave(one, file = "pie12.png")
library(tidyverse)
library(ggthemes)
library(readxl)
library(writexl)
#Loading in the excel file when 3d printing analysis is set as working directory
prints <- read_excel("Data/Example data.xlsx")
#Filtering the data based on date
#prints <- prints %>% filter(completion_time >= as.Date("2023-04-13"))
#Wrangling the data to be in pie chart format
pies <- prints %>% count(print)
pies$percent_NOP <- pies$n / sum(pies$n) * 100
pies$print <- as.character(pies$print)
pies1 <- pies %>% head(20)
# Create the pie chart
ggplot(pies1, aes(x = "", y = percent_NOP, fill = print)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
#scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "3D print distribution"
) +
theme_void()
#ggsave(one, file = "pie12.png")
#Still really difficult to see graphically so will make a table
ggplot(prints, aes(x = print)) +
geom_bar()
table_prints <- table(prints$print)
table_counts_df <- as.data.frame(table_prints)
# Rename the columns in the data frame
colnames(table_counts_df) <- c("Print", "Count")
table_counts_df <- arrange(table_counts_df, desc(Count))
print(table_counts_df)
#write_xlsx(table_counts_df, "print distribution_after.xlsx")
#might be useful later when coloring each bar chart according to it's actual color
colors_list <- unique(prints$color)
#might want to explore making color a factor variable if I want a specific order for my bar chart
#prints$color <- factor(prints$color, ordered = FALSE)
# If we want to order the colors on the bar chart by count
# prints$color <- factor(prints$color, levels = names(sort(table(prints$color), decreasing = TRUE)))
ggplot(prints, aes(x= color, fill = color)) +
geom_bar(show.legend = FALSE, color = "black") +
labs(title = "Color Distribution for 3D Prints",
y = "Number of Prints",
x = NULL,
subtitle = "After Online Form (after 6/5/23)") +
scale_y_continuous(
breaks = seq(0, 14, by = 2),
#minor_breaks = seq(0, 22, by = 1),
limits = c(0, 14)) +
#Archive print list color values
#scale_fill_manual(values = c("black", "blue", "darkgrey", "green", "lightgrey", "pink", "hotpink3", "mediumpurple4", "red", "ivory1", "indianred1", "yellow")) +
#Current print list color values
#scale_fill_manual(values = c("black", 'blue', 'green', 'darkgrey', 'orange', 'lightpink', 'red', 'floralwhite', 'yellow')) +
scale_fill_manual(values = c( 'blue', 'green',  'orange')) +
theme_clean() +
theme(plot.subtitle = element_text(size = 10),
axis.text.x = element_text(angle = 30, hjust = 1))
#In case we need to rotate the x axis labels or put in a minor line
#theme(axis.text.x = element_text(angle = 45, hjust = 1),
#panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"))
#ggsave(one, file = "print distribution_after.png")
#I filter out ID number 210 here because that was an outlier for contacting the person
prints <- prints %>% mutate(turnaround = as.Date(contacted_date) - as.Date(completion_time)) %>% filter(ID != 210)
#looking at turnaround time as a difftime variable
class(prints$turnaround)
summary(prints$turnaround, na.rm = TRUE)
mean(prints$turnaround, na.rm = TRUE)
#Changing turnaround variable to a numeric variable for a more standard analysis
prints$turnaround <- as.numeric(prints$turnaround)
summary(prints$turnaround, na.rm = TRUE)
mean_turnaround <- mean(prints$turnaround, na.rm = TRUE)
print(paste0("On average, it took us ", round(mean_turnaround, 2), " days to complete a patrons print once they requested it"))
emails_fails <- sum(prints$invalid_email == "X", na.rm = TRUE)
emails_fails <- round(emails_fails / length(prints$failed), digits = 2)
print(paste0(emails_fails * 100, "%", " patrons inputted email addresses were flagged failed by the program"))
fails <- sum(prints$failed == "X", na.rm = TRUE)
fail_percent <- round(fails / length(prints$failed), digits = 2)
print(paste0(fail_percent * 100, "%", " of our total print requests failed"))
prints_completed <- filter(prints, print_completed == "X")
picked_up <- sum(prints_completed$picked_up == "X", na.rm = TRUE)
picked_up <- round(picked_up / length(prints$picked_up), digits = 3)
print(paste0("Of the completed print rquests, ", picked_up * 100, "%", " of patrons have picked up their 3D prints"))
#Saving graphs
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis")
library(tidyverse)
library(ggthemes)
library(readxl)
library(writexl)
#prints <- read_excel("C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis/Data/EGR KDL Master 3D Printing List.xlsx")
#Loading in the excel file when 3d printing analysis is set as working directory
prints <- read_excel("C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis/Data/EGR KDL Master 3D Printing List.xlsx")
#Filtering the data based on date - 9/6/23 is when all of our colors were added to the form for patrons to choose
prints <- prints %>% filter(completion_time >= as.Date("2023-04-13"))
#Wrangling the data to be in pie chart format
pies <- prints %>% count(print)
pies$percent_NOP <- pies$n / sum(pies$n) * 100
pies$print <- as.character(pies$print)
pies1 <- pies %>% head(20)
# Create the pie chart
ggplot(pies1, aes(x = "", y = percent_NOP, fill = print)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
#scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "Study Rooms Requests by Group Size"
) +
theme_void()
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis/pie.png")
#Still really difficult to see graphically so will make a table
ggplot(prints, aes(x = print)) +
geom_bar()
table_prints <- table(prints$print)
table_counts_df <- as.data.frame(table_prints)
# Rename the columns in the data frame
colnames(table_counts_df) <- c("Print", "Count")
table_counts_df <- arrange(table_counts_df, desc(Count))
print(table_counts_df)
#write_xlsx(table_counts_df, "print distribution_after.xlsx")
#might be useful later when coloring each bar chart according to it's actual color
colors_list <- unique(prints$color)
#might want to explore making color a factor variable if I want a specific order for my bar chart
#prints$color <- factor(prints$color, ordered = FALSE)
# If we want to order the colors on the bar chart by count
# prints$color <- factor(prints$color, levels = names(sort(table(prints$color), decreasing = TRUE)))
ggplot(prints, aes(x= color, fill = color)) +
geom_bar(show.legend = FALSE, color = "black") +
labs(title = "Color Distribution for 3D Prints",
y = "Number of Prints",
x = NULL,
subtitle = "After Online Form (after 6/5/23)") +
scale_y_continuous(
breaks = seq(0, 14, by = 2),
#minor_breaks = seq(0, 22, by = 1),
limits = c(0, 14)) +
#Archive print list color values
#scale_fill_manual(values = c("black", "blue", "darkgrey", "green", "lightgrey", "pink", "hotpink3", "mediumpurple4", "red", "ivory1", "indianred1", "yellow")) +
#Current print list color values
scale_fill_manual(values = c("black", 'blue', 'green', 'darkgrey', 'orange', 'lightpink', 'red', 'floralwhite', 'yellow')) +
theme_clean() +
theme(plot.subtitle = element_text(size = 10),
axis.text.x = element_text(angle = 30, hjust = 1))
#In case we need to rotate the x axis labels or put in a minor line
#theme(axis.text.x = element_text(angle = 45, hjust = 1),
#panel.grid.minor.y = element_line(color = "gray", linetype = "dotted"))
#ggsave(one, file = "print distribution_after.png")
#I filter out ID number 210 here because that was an outlier for contacting the person
prints <- prints %>% mutate(turnaround = as.Date(contacted_date) - as.Date(completion_time)) %>% filter(ID != 210)
#looking at turnaround time as a difftime variable
class(prints$turnaround)
summary(prints$turnaround, na.rm = TRUE)
mean(prints$turnaround, na.rm = TRUE)
#Changing turnaround variable to a numeric variable for a more standard analysis
prints$turnaround <- as.numeric(prints$turnaround)
summary(prints$turnaround, na.rm = TRUE)
mean_turnaround <- mean(prints$turnaround, na.rm = TRUE)
print(paste0("On average, it took us ", round(mean_turnaround, 2), " days to complete a patrons print once they requested it"))
emails_fails <- sum(prints$invalid_email == "X", na.rm = TRUE)
emails_fails <- round(emails_fails / length(prints$failed), digits = 2)
print(paste0(emails_fails * 100, "%", " patrons inputted email addresses were flagged failed by the program"))
fails <- sum(prints$failed == "X", na.rm = TRUE)
fail_percent <- round(fails / length(prints$failed), digits = 2)
print(paste0(fail_percent * 100, "%", " of our total print requests failed"))
prints_completed <- filter(prints, print_completed == "X")
picked_up <- sum(prints_completed$picked_up == "X", na.rm = TRUE)
picked_up <- round(picked_up / length(prints$picked_up), digits = 3)
print(paste0("Of the completed print rquests, ", picked_up * 100, "%", " of patrons have picked up their 3D prints"))
#Saving graphs
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/3D Printing analysis")
#Loading in all appropriate libraries for the report
library(tidyverse)
library(janitor) # the tabyl function
library(scales) #functions for creating breaks and labels for axes and color scales
library(ggthemes)
library(readxl)
library(stringr) # manipulating strings
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r") #Library for crosstab function
library(expss) # Creating tables
library(writexl)
library(RColorBrewer)
library(lubridate) #Formatting dates and times
#Code to knit the file even if there are errors
knitr::opts_chunk$set(error = TRUE)
#Loading in the excel file omitting all missing values
study <- read_excel("Data/Example Data.xlsx") %>%
na.omit()
#Using the factor() function to chagne the varaibles Time and Room_Avaliable from their default character variables into factor varaibles. I specifiy the levels of each factor to ensure the proper order for the graph legends later on
#Encoding the variable Time as a factor with three levels "M", "A", "E" soon to represent "morning" "afternoon" and "evening
study$Time <- factor(study$Time, levels = c("M", "A", "E"))
study$Room_Avaliable <- factor(study$Room_Avaliable, levels = c("yes", "no"))
#Getting a brief look at our data set to make sure it looks good
head(study)
#Applying labels to the factors of variable time to be applied later on in the tabyl() to create our cross tab
study1 = apply_labels(study,
Time = c("Afternoon" = "A",
"Evening" = "E",
"Morning" = "M"))
#Function from the stringr library that will count all instances of 'yes' and 'no' observations from the variable Room_Avaliable
y <-str_count(study$Room_Avaliable, "yes")
n <-str_count(study$Room_Avaliable, "no")
#Using the summarize function to create a data frame that highlights some important summary statistics to be included in the report
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
summary(study$Numer_Of_People)
#this code is creating a cross-tabulation table from the study1 data frame and adding row and column totals, as well as a new column with the success rate calculated from the yes and Total columns. The success rate column is also formatted as a percentage.
tab <- tabyl(study1, Time, Room_Avaliable) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
print(tab)
# The as.Date() function is used to convert the orginal character date column into a date vector. It takes a character vector as input and returns a date vector with the same length.
study$newdate <- as.Date(study$Date)
#Formats new date function into the format 11/07/2022 (month, day, 4 digit year)
study$newdate <- format(study$newdate, "%m/%d/%Y")
study <- study %>% mutate(days = weekdays(Date))
tab <- tabyl(study, newdate, Room_Avaliable, days) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
# Calculate percentages
totals <- study %>% count(Numer_Of_People)
totals$percent_NOP <- totals$n / sum(totals$n) * 100
totals$Numer_Of_People <- as.character(totals$Numer_Of_People)
# Create the pie chart
ggplot(totals, aes(x = "", y = percent_NOP, fill = Numer_Of_People)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percent_NOP), "%")),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = .8),
size = 4) +
#geom_text(aes(label = paste0(round(percent_NOP), "%")), position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Dark2", name = "Number of People per Group") +
labs(
title = "Study Rooms Requests by Group Size"
) +
theme_void()
size <- study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_histogram(stat = "count", position = "dodge2", color = "black", fill = "#1F78B4", width = .6) +
ggtitle("Study Rooms Requests by Group Size") +
xlab("Group Size (Number of People per Group)") +
ylab("Observations") +
labs(caption = "Figure 1.1")  +
scale_y_continuous(
breaks = seq(0, 190, by = 10),
limits = c(0, 190)) +
theme_clean() +
theme(legend.position = c(0.6, 0.6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
size
success <- study %>% ggplot(aes(x=Numer_Of_People, fill = Room_Avaliable)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab('Group Size (Number of People per Group)') +
ylab("Observations") +
ggtitle("Success of Getting a Study Room by Group Size") +
labs(caption = "Figure 1.2") +
scale_fill_manual(name= "Room Available?", labels= c("Yes", "No"), values=c("#66A61E", "#7570B3")) +
scale_y_continuous(
breaks = seq(0, 145, by = 10)) +
theme_clean() +
theme(legend.position = c(.7, .6),
plot.title = element_text(size = 12))
success
time <- study %>% ggplot(aes(x=Numer_Of_People, fill = Time)) +
geom_histogram(stat= "count" , position = "dodge2", color="black") +
xlab("Group Size (Number of People per Group)") +
ylab("Observaitons") +
ggtitle("Study Rooms Requests by Time") +
labs(caption = "Figure 1.3")+
scale_fill_brewer(labels= c("Morning", "Afternoon", "Evening"), palette = "Dark2") +
scale_y_continuous(
breaks = seq(0, 110, by = 5),
limits = c(0, 105)) +
theme_clean() +
theme(legend.position = c(.6, .6),
legend.direction = "horizontal",
legend.title = element_text(size = 10.5),
legend.text = element_text(size = 10))
time
#ggsave(one, file = "C:/Users/Ryan/Coding Projects/KDL Project/Quarterly Reports/Graphs/testingsy.png")
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
View(study)
#Function from the stringr library that will count all instances of 'yes' and 'no' observations from the variable Room_Avaliable
y <-str_count(study$Room_Avaliable, "yes")
n <-str_count(study$Room_Avaliable, "no")
#Using the summarize function to create a data frame that highlights some important summary statistics to be included in the report
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
summary(study$Numer_Of_People)
#this code is creating a cross-tabulation table from the study1 data frame and adding row and column totals, as well as a new column with the success rate calculated from the yes and Total columns. The success rate column is also formatted as a percentage.
tab <- tabyl(study1, Time, Room_Avaliable) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
print(tab)
# The as.Date() function is used to convert the orginal character date column into a date vector. It takes a character vector as input and returns a date vector with the same length.
study$newdate <- as.Date(study$Date)
#Formats new date function into the format 11/07/2022 (month, day, 4 digit year)
study$newdate <- format(study$newdate, "%m/%d/%Y")
#Code to create a cross tabulation investigating success rate of getting a study by individual day applying the percent format to the success_rate column
tab <- tabyl(study, newdate, Room_Avaliable) %>%
adorn_totals(c("row", "col")) %>%
mutate(Success_rate = yes/Total) %>%
adorn_pct_formatting(,,,Success_rate)
print(tab)
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
study %>%
ggplot(aes(x = Numer_Of_People)) +
geom_boxplot()
print(m)
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
#taking in all the libraries and data wrangling from this initial R file
source("C:/Users/Ryan/Coding Projects/Public Forks/PUB Studies/Wrangling.R")
#Function from the stringr library that will count all instances of 'yes' and 'no' observations from the variable Room_Avaliable
y <-str_count(study$Room_Avaliable, "yes")
n <-str_count(study$Room_Avaliable, "no")
#Using the summarize function to create a data frame that highlights some important summary statistics to be included in the report
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
summary(study$Numer_Of_People)
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
print(m)
summary(study$Numer_Of_People)
#Function from the stringr library that will count all instances of 'yes' and 'no' observations from the variable Room_Avaliable
y <-str_count(study$Room_Avaliable, "yes")
n <-str_count(study$Room_Avaliable, "no")
#Using the summarize function to create a data frame that highlights some important summary statistics to be included in the report
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
summary(study$Numer_Of_People)
summary(study$Numer_Of_People)
summary(study$Numer_Of_People)
#Function from the stringr library that will count all instances of 'yes' and 'no' observations from the variable Room_Avaliable
y <-str_count(study$Room_Avaliable, "yes")
n <-str_count(study$Room_Avaliable, "no")
#Using the summarize function to create a data frame that highlights some important summary statistics to be included in the report
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
summary(study$Numer_Of_People)
summary(study$Numer_Of_People)
#Function from the stringr library that will count all instances of 'yes' and 'no' observations from the variable Room_Avaliable
y <-str_count(study$Room_Avaliable, "yes")
n <-str_count(study$Room_Avaliable, "no")
#Using the summarize function to create a data frame that highlights some important summary statistics to be included in the report
m <-study %>%
summarise(yes = sum(y), no = sum(n), total = yes+no, Success_Rate = yes/total,
min = min(Numer_Of_People),
max = max(Numer_Of_People),
MeanG = mean(Numer_Of_People),
MeanC = (total/18),
sd = sd(Numer_Of_People),
Median = median(Numer_Of_People))
print(m)
summary(study$Numer_Of_People)
